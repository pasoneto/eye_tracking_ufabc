plot(data2)
data2 = data.frame(cent = seq(1300, 2000, 100),
distance = -seq(1300, 2000, 100)^20)
plot(data2)
data2 = data.frame(cent = seq(1300, 2000, 100),
distance = -seq(1300, 2000, 100)^-20)
plot(data2)
data2 = data.frame(cent = seq(1300, 2000, 100),
distance = -seq(1300, 2000, 100)^-2)
plot(data2)
View(data2)
data2 = data.frame(cent = seq(1300, 2000, 100),
distance = -seq(1300, 2000, 100)^-2)+500)
plot(data2)
View(data2)
data2 = data.frame(cent = seq(1300, 2000, 100),
distance = -seq(1300, 2000, 100)^-2))
plot(data2)
data2 = data.frame(cent = seq(1300, 2000, 100),
distance = (-seq(1300, 2000, 100)^-2)+500)
plot(data2)
data2 = data.frame(cent = seq(1300, 2000, 100),
distance = log(1300, 2000, 100))
plot(data2)
data2 = data.frame(cent = seq(1300, 2000, 100),
distance = log(1300, 2000, 100))
plot(data2)
cent2 = seq(1300, 2000, 100)
cent2 = seq(1300, 2000, 100)
data2 = data.frame(cent = cent2,
distance = log(cent2))
plot(data2)
cent2 = seq(130000, 200000, 10000)
data2 = data.frame(cent = cent2,
distance = log(cent2))
plot(data2)
ggplot(data=data, aes(x = cent, y = log(distance)))+
geom_point()+
geom_text(aes(label=cent),hjust=-1, vjust=0)+
xlab("Cents")+
ylab("Perceived distance")+
xlim(c(0, 2000))+
ylim(c(0, 2000))
ggplot(data=data, aes(x = cent, y = log(distance)))+
geom_point()+
geom_text(aes(label=cent),hjust=-1, vjust=0)+
xlab("Cents")+
ylab("Perceived distance")
ggplot(data=data, aes(x = cent, y = distance))+
geom_point()+
geom_text(aes(label=cent),hjust=-1, vjust=0)+
xlab("Cents")+
ylab("Perceived distance")
x <- c(1, 1, 4, 4)
y <- c(1, 3, 2, 6)
x-mean(x)
x_minus_xmean = x-mean(x)
y_minus_ymean = y-mean(y)
x_minus_xmean = sum(x-mean(x))
y_minus_ymean = sum(y-mean(y))
xy_deviances = sum(x_minus_xmean*y_minus_ymean)
x-mean(x)
x <- c(1, 1, 4, 4)
y <- c(1, 3, 2, 6)
sum(x_minus_xmean*y_minus_ymean)
x <- c(0, 0, 0, 1, 1, 1, 2, 2, 2)
y <- c(0, 4, 5, 4, 5, 6, 5, 6, 10)
sum(x-mean(x))
mean(x)
x
x-mean(x)
sum(abs(x-mean(x)))
x_minus_xmean = sum(abs(x-mean(x)))
y_minus_ymean = sum(abs(y-mean(y)))
sum(abs(y-mean(y)))
x_minus_xmean*y_minus_ymean
sum(x_minus_xmean*y_minus_ymean)
y-mean(y)
x_minus_xmean*y_minus_ymean
x_minus_xmean = sum(abs(x-mean(x)))
y_minus_ymean = sum(abs(y-mean(y)))
x_x = c(x-mean(x))
y_y = c(y-mean(y))
x_x*y_y
sum(x_x*y_y)
sum(abs(x-mean(x)))
sum(abs(y-mean(y)))
sum(x_x*y_y)
sum(abs(x-mean(x)))
xy_deviances / x_minus_xmean
x_x = c(x-mean(x))
y_y = c(y-mean(y))
x_minus_xmean = sum(abs(x-mean(x)))
y_minus_ymean = sum(abs(y-mean(y)))
xy_deviances = sum(x_x*y_y)
xy_deviances
x_minus_xmean
xy_deviances / x_minus_xmean
mean(y)
slope*mean(x)
slope = xy_deviances / x_minus_xmean
intercept = mean(y) - slope*mean(x)
intercept
paste('y = ', intercept,  '+',  slope, 'x')
paste('y =', intercept,  '+',  slope, 'x')
paste('y =', intercept,  '+',  slope, 'x')
paste('y = ', intercept, ' + ', slope, 'x', sep='')
x <- c(1, 1, 4, 4)
y <- c(1, 3, 2, 6)
x_x = c(x-mean(x))
y_y = c(y-mean(y))
x_minus_xmean = sum(abs(x-mean(x)))
y_minus_ymean = sum(abs(y-mean(y)))
xy_deviances = sum(x_x*y_y)
slope = xy_deviances / x_minus_xmean
intercept = mean(y) - slope*mean(x)
intercept
paste('y = ', intercept, ' + ', slope, 'x', sep='')
lm(y~x)
lm(x~y)
lm(y~x)
x <- c(1, 1, 4, 4)
y <- c(1, 3, 2, 6)
x_x = c(x-mean(x))
y_y = c(y-mean(y))
x_minus_xmean = sum(abs(x-mean(x)))
y_minus_ymean = sum(abs(y-mean(y)))
xy_deviances = sum(x_x*y_y)
slope = xy_deviances / x_minus_xmean
intercept = mean(y) - slope*mean(x)
intercept
paste('y = ', intercept, ' + ', slope, 'x', sep='')
lm(y~x)
(kp = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88)
nomes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'))
data.frame(kp = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
nomes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'))
d =
data.frame(kp = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
nomes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'))
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'))
require(ggplot2)
p=
ggplot(d, aes(x = Notes, y = Profiles))+
geom_line()
p
p=
ggplot(d, aes(x = Notes, y = Profiles), groups = 1)+
geom_line()
p
p=
ggplot(d, aes(x = Notes, y = Profiles), group = 1)+
geom_line()
p
p=
ggplot(d, aes(x = Notes, y = Profiles, group = 1))+
geom_line()
p
d =
data.frame(Profiles = c( 6.35, 2.23, 3.48, 2.33, 4.38,
4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'))
require(ggplot2)
p=
ggplot(d, aes(x = Notes, y = Profiles, group = 1))+
geom_line()
p
d =
data.frame(Profiles = c( 6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'))
p=
ggplot(d, aes(x = Notes, y = Profiles, group = 1))+
geom_line()
p
View(d)
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 11, 12))
seq(1, 11, 12)
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1))
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, 0, 3.48, 0, 4.38, 4.09, 0, 5.19, 0, 3.66, 0, 2.88)))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, 0, 3.48, 0, 4.38, 4.09, 0, 5.19, 0, 3.66, 0, 2.88)))
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, 0, 3.48, 0, 4.38, 4.09, 0, 5.19, 0, 3.66, 0, 2.88))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))+
ylim = c(0, 7)
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))+
ylim = c(0, 7)
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, NA, 3.48, NA, 4.38, 4.09, NA, 5.19, NA, 3.66, NA, 2.88))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, NA, 3.48, NA, 4.38, 4.09, NA, 5.19, NA, 3.66, NA, 2.88))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))+
xlab("Notes")
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, NA, 3.48, NA, 4.38, 4.09, NA, 5.19, NA, 3.66, NA, 2.88))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), fill = 'white')+
xlab("Notes")
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, NA, 3.48, NA, 4.38, 4.09, NA, 5.19, NA, 3.66, NA, 2.88))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), fill = 'white', size = 2)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia),fill = "white", size = 2)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point()
geom_point(aes(x = reorder(Notes, ord), y = dia)shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia)shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)+
xlab("Notes")
p
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 1, stroke = 5)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 1, stroke = 5)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 1)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 2)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 2, stroke = 2)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), colour = "black", fill = "white", size = 2, stroke = 2)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 2, stroke = 2)+
xlab("Notes")
p
p
ggsave(p, filename = "C:/Users/Lenovo/Desktop/world/Ciência/UFABC/Dissertação/images/fig0.png", dpi = 600,
width = 6, height = 4.5, units = "in")
names <- c()
for(i in 1:10){
name <- paste('participant', i)
names[i] <- name
}
before_coffee = seq(from = 5, to = 50, by = 5) + rnorm(n = 10, mean = 1, sd = 2)
coffee_sim <- data.frame( "Participants" = c(names),
"before_coffee" = before_coffee,
"after_coffee" = before_coffee + rnorm(n = 10, mean = 20, sd = 1)
)
#1) Imagine you are a researcher and you want to measured the speed
#of a pearson running before and after a cup of coffee. Here's your data set. Take a look at it
#compare the differences in both within subject (row to row),
#and within conditions (column to column):
coffee_sim
) Calculate the descriptive statistics that we learned in our previous exercises
mean(coffee_sim$before_coffee)
mean(coffee_sim$after_coffee)
sd(coffee_sim$before_coffee)
sd(coffee_sim$after_coffee)
#4) Calculate the difference in scores between conditions:
dif <- mean(coffee_sim$before_coffee - coffee_sim$after_coffee)
#5) Calculate the standard error of the mean of the differences
se_mean <- sd(coffee_sim$before_coffee - coffee_sim$after_coffee)/sqrt(length(coffee_sim$before_coffee))
#6) Now divide the difference you found between samples with the S.E.
dif/se_mean
#7) Now compute a paired samples t-test using r's native function. Compare the t-statistic
#with the result from question 6
t.test(coffee_sim$before_coffee,
coffee_sim$after_coffee,
paired = TRUE)[["statistic"]][["t"]]
coffee_sim$before_coffee - coffee_sim$after_coffee
t.test(coffee_sim$after_coffee,
coffee_sim$before_coffee,
paired = FALSE)[["statistic"]][["t"]]
#4) Calculate the difference in scores between conditions:
dif <- mean(coffee_sim$before_coffee - coffee_sim$after_coffee)
#5) Calculate the standard error of the mean of the differences
se_mean <- sd(coffee_sim$before_coffee - coffee_sim$after_coffee)/sqrt(length(coffee_sim$before_coffee))
#6) Now divide the difference you found between samples with the S.E.
dif/se_mean
#7) Now compute a paired samples t-test using r's native function. Compare the t-statistic
#with the result from question 6
t.test(coffee_sim$before_coffee,
coffee_sim$after_coffee,
paired = TRUE)[["statistic"]][["t"]]
t.test(coffee_sim$after_coffee,
coffee_sim$before_coffee,
paired = TRUE)[["statistic"]][["t"]]
qnorm(0.25,mean=385,sd=110)
qnorm(0.25,mean=385,sd=110)
pnormGC(310.80, region="below", mean=385,
sd=110,graph=TRUE)
install.packages('pnormGC')
qnorm(0.25,mean=385,sd=110)
qnorm(0.1,mean=385,sd=110)
names <- c()
for(i in 1:10){
name <- paste('participant', i)
names[i] <- name
}
before_coffee = seq(from = 5, to = 50, by = 5) + rnorm(n = 10, mean = 1, sd = 2)
coffee_sim <- data.frame( "Participants" = c(names),
"before_coffee" = before_coffee,
"after_coffee" = before_coffee + rnorm(n = 10, mean = 20, sd = 1)
)
dif/se_mean
library(ggplot2)
library(dplyr)
library(data.table)
##############################
## DEFINING HANDY FUNCTIONS ##
##############################
#Function tags the last appearence of element.
last_element = function(vector, element, tag){
p_element = which(vector == element) #gets position of element
i_last = p_element[length(p_element)] #takes the last appearence of element
vector[i_last] = tag #tags
return(vector)
}
#Test case
#v = c('oi','oi','oi','tchau', 'tchau', 'tchau')
#e = 'oi'
#last_element(v, e, 'ultimo_oi') #Works!
#Defining function to compute alternance between columns of vectors
alternancia = function(vector1, vector2){
count = 0
for(i in 1:length(vector1)-1){
if( isTRUE((vector1[i] == 1) && (vector2[i+1] == 1)) ){
count = count + 1
}
}
return(count)
}
########################
## APPLYING FUNCTIONS ##
########################
#sets the directory to where your file is
setwd('C:/Users/Lenovo/Documents/GitHub/eye_tracking_ufabc/data')
data =
fread("complete.csv")[, 3:ncol(fread("complete.csv"))]
data =
data[, parte := last_element(parte,'cruz','ultima_cruz'),
by = c('crianca', 'video')
]
alternancia(data$acerto_frente, data$acerto_fundo)
data$frente_fundo = 0
data$fundo_frente  = 0
data$fundo_errado  = 0
data$errado_fundo  = 0
data$frente_errado = 0
data$errado_frente = 0
teste =
data[,  frente_fundo := alternancia(acerto_frente, acerto_fundo),
fundo_frente  := alternancia(acerto_fundo, acerto_frente),
fundo_errado  := alternancia(acerto_fundo, olhou_pro_errado),
errado_fundo  := alternancia(olhou_pro_errado, acerto_fundo),
frente_errado := alternancia(acerto_frente, olhou_pro_errado),
errado_frente := alternancia(olhou_pro_errado, acerto_frente),
by = c("crianca", "video")
]
data =
fread("complete.csv")[, 3:ncol(fread("complete.csv"))]
data =
data[, parte := last_element(parte,'cruz','ultima_cruz'),
by = c('crianca', 'video')
]
data =
fread("complete.csv")[, 3:ncol(fread("complete.csv"))]
data =
data[, parte := last_element(parte,'cruz','ultima_cruz'),
frente_fundo := alternancia(acerto_frente, acerto_fundo),
by = c('crianca', 'video')
]
data =
fread("complete.csv")[, 3:ncol(fread("complete.csv"))]
data =
data[, parte := last_element(parte,'cruz','ultima_cruz'),
frente_fundo := alternancia(acerto_frente, acerto_fundo),
by = c('crianca', 'video')
]
#sets the directory to where your file is
setwd('C:/Users/Lenovo/Documents/GitHub/eye_tracking_ufabc/data')
data =
fread("complete.csv")[, 3:ncol(fread("complete.csv"))]
data =
data[, parte := last_element(parte,'cruz','ultima_cruz'),
by = c('crianca', 'video')
]
teste <- plyr::ddply(data, c("video", "crianca"), summarise,
frente_fundo = alternancia(acerto_frente, acerto_fundo),
fundo_frente = alternancia(acerto_fundo, acerto_frente),
fundo_errado = alternancia(acerto_fundo, olhou_pro_errado),
errado_fundo = alternancia(olhou_pro_errado, acerto_fundo),
frente_errado = alternancia(acerto_frente, olhou_pro_errado),
errado_frente = alternancia(olhou_pro_errado, acerto_frente)
)
View(teste)
teste <- plyr::ddply(data, c("video", "crianca"), summarise,
frente_fundo = alternancia(acerto_frente, acerto_fundo),
fundo_frente = alternancia(acerto_fundo, acerto_frente),
fundo_errado = alternancia(acerto_fundo, olhou_pro_errado),
errado_fundo = alternancia(olhou_pro_errado, acerto_fundo),
frente_errado = alternancia(acerto_frente, olhou_pro_errado),
errado_frente = alternancia(olhou_pro_errado, acerto_frente)
)
alternancia(data$acerto_frente, data$acerto_fundo)
sum(teste$frente_fundo)
