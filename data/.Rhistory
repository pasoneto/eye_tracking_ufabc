d =
data.frame(Profiles = c( 6.35, 2.23, 3.48, 2.33, 4.38,
4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'))
require(ggplot2)
p=
ggplot(d, aes(x = Notes, y = Profiles, group = 1))+
geom_line()
p
d =
data.frame(Profiles = c( 6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'))
p=
ggplot(d, aes(x = Notes, y = Profiles, group = 1))+
geom_line()
p
View(d)
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 11, 12))
seq(1, 11, 12)
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1))
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, 0, 3.48, 0, 4.38, 4.09, 0, 5.19, 0, 3.66, 0, 2.88)))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, 0, 3.48, 0, 4.38, 4.09, 0, 5.19, 0, 3.66, 0, 2.88)))
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, 0, 3.48, 0, 4.38, 4.09, 0, 5.19, 0, 3.66, 0, 2.88))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))+
ylim = c(0, 7)
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))+
ylim = c(0, 7)
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, NA, 3.48, NA, 4.38, 4.09, NA, 5.19, NA, 3.66, NA, 2.88))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, NA, 3.48, NA, 4.38, 4.09, NA, 5.19, NA, 3.66, NA, 2.88))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia))+
xlab("Notes")
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, NA, 3.48, NA, 4.38, 4.09, NA, 5.19, NA, 3.66, NA, 2.88))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), fill = 'white')+
xlab("Notes")
p
d =
data.frame(Profiles = c(6.35, 2.23, 3.48, 2.33, 4.38, 4.09, 2.52, 5.19, 2.39, 3.66, 2.29, 2.88),
Notes = c('c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'),
ord = seq(1, 12, 1),
dia = c(6.35, NA, 3.48, NA, 4.38, 4.09, NA, 5.19, NA, 3.66, NA, 2.88))
require(ggplot2)
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), fill = 'white', size = 2)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia),fill = "white", size = 2)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point()
geom_point(aes(x = reorder(Notes, ord), y = dia)shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia)shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)+
xlab("Notes")
p
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 1, stroke = 5)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 1, stroke = 5)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 1)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 2)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 2, stroke = 2)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), colour = "black", fill = "white", size = 2, stroke = 2)+
xlab("Notes")
p
p=
ggplot(d, aes(x = reorder(Notes, ord), y = Profiles, group = 1))+
geom_line()+
geom_point(aes(x = reorder(Notes, ord), y = dia), shape = 21, colour = "black", fill = "white", size = 2, stroke = 2)+
xlab("Notes")
p
p
ggsave(p, filename = "C:/Users/Lenovo/Desktop/world/Ciência/UFABC/Dissertação/images/fig0.png", dpi = 600,
width = 6, height = 4.5, units = "in")
names <- c()
for(i in 1:10){
name <- paste('participant', i)
names[i] <- name
}
before_coffee = seq(from = 5, to = 50, by = 5) + rnorm(n = 10, mean = 1, sd = 2)
coffee_sim <- data.frame( "Participants" = c(names),
"before_coffee" = before_coffee,
"after_coffee" = before_coffee + rnorm(n = 10, mean = 20, sd = 1)
)
#1) Imagine you are a researcher and you want to measured the speed
#of a pearson running before and after a cup of coffee. Here's your data set. Take a look at it
#compare the differences in both within subject (row to row),
#and within conditions (column to column):
coffee_sim
) Calculate the descriptive statistics that we learned in our previous exercises
mean(coffee_sim$before_coffee)
mean(coffee_sim$after_coffee)
sd(coffee_sim$before_coffee)
sd(coffee_sim$after_coffee)
#4) Calculate the difference in scores between conditions:
dif <- mean(coffee_sim$before_coffee - coffee_sim$after_coffee)
#5) Calculate the standard error of the mean of the differences
se_mean <- sd(coffee_sim$before_coffee - coffee_sim$after_coffee)/sqrt(length(coffee_sim$before_coffee))
#6) Now divide the difference you found between samples with the S.E.
dif/se_mean
#7) Now compute a paired samples t-test using r's native function. Compare the t-statistic
#with the result from question 6
t.test(coffee_sim$before_coffee,
coffee_sim$after_coffee,
paired = TRUE)[["statistic"]][["t"]]
coffee_sim$before_coffee - coffee_sim$after_coffee
t.test(coffee_sim$after_coffee,
coffee_sim$before_coffee,
paired = FALSE)[["statistic"]][["t"]]
#4) Calculate the difference in scores between conditions:
dif <- mean(coffee_sim$before_coffee - coffee_sim$after_coffee)
#5) Calculate the standard error of the mean of the differences
se_mean <- sd(coffee_sim$before_coffee - coffee_sim$after_coffee)/sqrt(length(coffee_sim$before_coffee))
#6) Now divide the difference you found between samples with the S.E.
dif/se_mean
#7) Now compute a paired samples t-test using r's native function. Compare the t-statistic
#with the result from question 6
t.test(coffee_sim$before_coffee,
coffee_sim$after_coffee,
paired = TRUE)[["statistic"]][["t"]]
t.test(coffee_sim$after_coffee,
coffee_sim$before_coffee,
paired = TRUE)[["statistic"]][["t"]]
qnorm(0.25,mean=385,sd=110)
qnorm(0.25,mean=385,sd=110)
pnormGC(310.80, region="below", mean=385,
sd=110,graph=TRUE)
install.packages('pnormGC')
qnorm(0.25,mean=385,sd=110)
qnorm(0.1,mean=385,sd=110)
names <- c()
for(i in 1:10){
name <- paste('participant', i)
names[i] <- name
}
before_coffee = seq(from = 5, to = 50, by = 5) + rnorm(n = 10, mean = 1, sd = 2)
coffee_sim <- data.frame( "Participants" = c(names),
"before_coffee" = before_coffee,
"after_coffee" = before_coffee + rnorm(n = 10, mean = 20, sd = 1)
)
dif/se_mean
library(readxl)
library(ggplot2)
library(dplyr)
library(stringr)
library(data.table)
#sets the directory to where your file is
setwd('C:/Users/Lenovo/Documents/GitHub/eye_tracking_ufabc/data')
#Reads data
data =
fread('babies_rawdata.csv')
data$anchor_time <- 0 #creates empty vectors for anchor
data$correction_time <- 0 #creates empty vectors for new timing
#Reunites data frame
criancas =
dplyr::bind_rows(criancas)
#Separates data into 1 data frame for each participant and trial
criancas =
split(data,
list(data$RECORDING_SESSION_LABEL,
data$TRIAL_LABEL))
for(i in 1:length(criancas)){ #for each trial from each participant
#gets the index where condition is met (video_clip == video_name_end)
inicio = match(unique(criancas[[i]]$video_clip),
criancas[[i]]$VIDEO_NAME_END)
#some trials are empty, so we don't do anything with them
if(nrow(criancas[[i]]) != 0){
#some trials never meet our criteria (video_clip == video_name_end)
#so we skip them
if(is.na(inicio) == FALSE){
#now we finally perform the operation:
#latencia is the time (ms) where video_clip == video_name_end
latencia = criancas[[i]]$CURRENT_FIX_START[inicio]
#we save it in a separate column, called correction_time
criancas[[i]][["correction_time"]] = latencia
#now we subtract the original time (current_fix_start) with
#the time where things begin (video_clip == video_name_end).
#initial time will always be 0, and previous will be negative
criancas[[i]]$anchor_time <- criancas[[i]][["CURRENT_FIX_START"]] - latencia
}
}
}
criancas =
dplyr::bind_rows(criancas)
criancas = criancas[order(criancas$RECORDING_SESSION_LABEL, criancas$TRIAL_INDEX),]
data =
read_excel('babies_times.xlsx')
data$CRUZ_START <- c(3750, 3071, "baseline", 3740, 4237, "baseline", 3740, 3071, 3740, 3872, 3741, 3872, 4240, 3740, "baseline")
data$CRUZ_END <- c(4250, 3571, "baseline", 4240, 4737, "baseline", 4240, 3571, 4240, 4372, 4241, 4372, 4740, 4240,  "baseline")
#antes, durante depois da cruz
#data =
#  split(criancas, criancas$)
#Retirando .avi para ficar igual ao documento babies_times.xlsx
criancas$video_clip <-
str_replace(criancas$video_clip,".avi","")
#Adding info from babies_times.xlsx
criancas =
merge(criancas, data, by.x = "video_clip", by.y = "...1", all = F)
criancas =
criancas[order(criancas$RECORDING_SESSION_LABEL, criancas$TRIAL_INDEX),]
criancas$parte_trial <- 'baseline'
View(criancas)
for(i in 1:nrow(criancas)){
if(criancas$CRUZ_START[[i]] != 'baseline'){
if(criancas$anchor_time[[i]] < as.numeric(criancas$CRUZ_START[[i]])){
criancas$parte_trial[[i]] = 'pre_cruz'
}
if( (criancas$anchor_time[[i]] > as.numeric(criancas$CRUZ_START[[i]])) && (criancas$anchor_time[[i]] < as.numeric(criancas$CRUZ_END[[i]])) ){
criancas$parte_trial[[i]] = 'cruz'
}
if(criancas$anchor_time[[i]] > as.numeric(criancas$CRUZ_END[[i]])){
criancas$parte_trial[[i]] = 'pos_cruz'
}
}
}
rois =
read_excel("roi.xlsx")
#Adding info from babies_times.xlsx
criancas =
merge(criancas, data, by.x = "video_clip", by.y = "...1", all = F)
criancas =
merge(criancas, rois, by.x = "video_clip", by.y = "Trial", all = F)
criancas$acerto_fundo = criancas$`Roi cabeça(fundo)` == criancas$ROIfundo
criancas$acerto_frente = criancas$`ROI alvo (frente)` == criancas$ROIfrente
criancas$olhou_pro_errado = criancas$`ROI Nalvo (frente)` == criancas$ROIfrente
criancas$acerto_fundo <- as.character(criancas$acerto_fundo)
criancas$acerto_fundo <- ifelse(is.na(criancas$acerto_fundo),
'FALSE', criancas$acerto_fundo)
criancas$acerto_frente <- as.character(criancas$acerto_frente)
criancas$acerto_frente <- ifelse(is.na(criancas$acerto_frente),
'FALSE', criancas$acerto_frente)
criancas$olhou_pro_errado <- as.character(criancas$olhou_pro_errado)
criancas$olhou_pro_errado <- ifelse(is.na(criancas$olhou_pro_errado),
'FALSE', criancas$olhou_pro_errado)
verificacao =
data.frame(crianca = criancas$RECORDING_SESSION_LABEL,
time = criancas$anchor_time,
parte = criancas$parte_trial,
video = criancas$video_clip,
roi_frente_empirico = criancas$ROIfrente,
roi_fundo_empirico = criancas$ROIfundo,
roi_alvo_fundo = criancas$`Roi cabeça(fundo)`,
roi_alvo_frente = criancas$`ROI alvo (frente)`,
roi_nao_alvo = criancas$`ROI Nalvo (frente)`,
acerto_frente = criancas$acerto_frente,
acerto_fundo = criancas$acerto_fundo,
olhou_pro_errado = criancas$olhou_pro_errado,
referencia = criancas$`Estímulo(referencia esq/dir - olhando para tela)`)
rm(list=ls()) #cleans directory
data =
fread("complete.csv")[, 3:ncol(fread("complete.csv"))]
data =
filter(data,
data$parte == 'cruz')
#Creating empty vectors
data$fixou_cruz = 0
data =
split(data,
list(data$crianca, data$video))
ntando o numero de acertos por criança e por trial
for(i in 1:length(data)){
if(  nrow(data[[i]]) != 0  ) { #tirando os casos onde não houve dado para trial
if( nrow(filter(data[[i]], data[[i]]$acerto_fundo == 'TRUE')) != 0 ){
acerto = 1
}
else{
acerto = 0
}
data[[i]]$fixou_cruz = acerto
}
}
data =
dplyr::bind_rows(data)
fixou_cruz <- plyr::ddply(data, c('crianca', 'video', 'referencia'), summarise,
fixou_cruz = mean(fixou_cruz, na.rm = TRUE)
)
data =
fread("complete.csv")
data =
filter(data,
data$parte == 'pos_cruz')
#Creating empty vectors
data$acertou_frente = 0
data$olhou_errado = 0
library(ggplot2)
library(dplyr)
library(data.table)
##############################
## DEFINING HANDY FUNCTIONS ##
##############################
#Function tags the last appearence of element.
last_element = function(vector, element, tag){
p_element = which(vector == element) #gets position of element
i_last = p_element[length(p_element)] #takes the last appearence of element
vector[i_last] = tag #tags
return(vector)
}
#Defining function to compute alternance between columns of vectors
alternancia = function(vector1, vector2){
count = 0
for(i in 1:length(vector1)-1){
if( isTRUE((vector1[i] == 1) && (vector2[i+1] == 1)) ){
count = count + 1
}
}
return(count)
}
#sets the directory to where your file is
setwd('C:/Users/Lenovo/Documents/GitHub/eye_tracking_ufabc/data')
data =
fread("complete.csv")[, 3:ncol(fread("complete.csv"))]
data =
data[, parte := last_element(parte,'cruz','ultima_cruz'),
by = c('crianca', 'video')
]
data =
dplyr::filter(data,
data$parte == "ultima_cruz" | data$parte == 'pos_cruz'
)
data =
split(data,
list(data$crianca,
data$video))
for(i in 1:length(data)){
if(nrow(data[[i]]) != 0){
data[[i]]$frente_fundo = alternancia(data[[i]]$acerto_frente, data[[i]]$acerto_fundo)
data[[i]]$fundo_frente = alternancia(data[[i]]$acerto_fundo, data[[i]]$acerto_frente)
data[[i]]$fundo_errado = alternancia(data[[i]]$acerto_fundo, data[[i]]$olhou_pro_errado)
data[[i]]$errado_fundo = alternancia(data[[i]]$olhou_pro_errado, data[[i]]$acerto_fundo)
data[[i]]$frente_errado = alternancia(data[[i]]$acerto_frente, data[[i]]$olhou_pro_errado)
data[[i]]$errado_frente = alternancia(data[[i]]$olhou_pro_errado, data[[i]]$acerto_frente)
}
}
data =
dplyr::bind_rows(data)
#Verificando prevalencia de fixação e acerto
plot<- plyr::ddply(data, c("video", "crianca", "parte"), summarise,
fixacoes    = length(parte),
acerto_fundo = sum(acerto_fundo),
acerto_frente = sum(acerto_frente),
olhou_pro_errado = sum(olhou_pro_errado)
)
library(ggplot2)
library(dplyr)
library(data.table)
##############################
## DEFINING HANDY FUNCTIONS ##
##############################
#Function tags the last appearence of element.
last_element = function(vector, element, tag){
p_element = which(vector == element) #gets position of element
i_last = p_element[length(p_element)] #takes the last appearence of element
vector[i_last] = tag #tags
return(vector)
}
#Test case
#v = c('oi','oi','oi','tchau', 'tchau', 'tchau')
#e = 'oi'
#last_element(v, e, 'ultimo_oi') #Works!
#Defining function to compute alternance between columns of vectors
alternancia = function(vector1, vector2){
count = 0
for(i in 1:length(vector1)-1){
if( isTRUE((vector1[i] == 1) && (vector2[i+1] == 1)) ){
count = count + 1
}
}
return(count)
}
########################
## APPLYING FUNCTIONS ##
########################
#sets the directory to where your file is
setwd('C:/Users/Lenovo/Documents/GitHub/eye_tracking_ufabc/data')
data =
fread("complete.csv")[, 3:ncol(fread("complete.csv"))]
data =
data[, parte := last_element(parte,'cruz','ultima_cruz'),
by = c('crianca', 'video')
]
data =
dplyr::filter(data,
data$parte == "ultima_cruz" | data$parte == 'pos_cruz'
)
data =
split(data,
list(data$crianca,
data$video))
for(i in 1:length(data)){
if(nrow(data[[i]]) != 0){
data[[i]]$frente_fundo = alternancia(data[[i]]$acerto_frente, data[[i]]$acerto_fundo)
data[[i]]$fundo_frente = alternancia(data[[i]]$acerto_fundo, data[[i]]$acerto_frente)
data[[i]]$fundo_errado = alternancia(data[[i]]$acerto_fundo, data[[i]]$olhou_pro_errado)
data[[i]]$errado_fundo = alternancia(data[[i]]$olhou_pro_errado, data[[i]]$acerto_fundo)
data[[i]]$frente_errado = alternancia(data[[i]]$acerto_frente, data[[i]]$olhou_pro_errado)
data[[i]]$errado_frente = alternancia(data[[i]]$olhou_pro_errado, data[[i]]$acerto_frente)
}
}
data =
dplyr::bind_rows(data)
View(data)
write.csv(data, 'alternancia.csv')
